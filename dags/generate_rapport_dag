from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime
import pandas as pd
from sqlalchemy import create_engine

def generate_rapport():
    engine = create_engine("postgresql+psycopg2://user:password@postgres:5432/sportdb")

    # Chargement des données
    df_rh = pd.read_sql("SELECT id_salarie, nom, prenom FROM rh", engine)
    df_elig = pd.read_sql("SELECT * FROM eligibilite", engine)
    df_tarif = pd.read_sql("SELECT * FROM tarif", engine)

    # Jointure RH + Éligibilité
    df = df_elig.merge(df_rh, on="id_salarie")

    # Tarif : 1ère ligne de la table tarif
    tarif_par_km = df_tarif.iloc[0]["montant_euro_par_km"]

    # Calcul du montant
    df["montant_euro"] = (df["distance_totale_m"] / 1000) * tarif_par_km

    # Colonnes finales
    df_final = df[[
        "id_salarie", "nom", "prenom",
        "nb_activites", "distance_totale_m",
        "est_eligible", "montant_euro"
    ]]

    # Sauvegarde
    df_final.to_csv("/opt/airflow/data/rapport_final.csv", index=False)
    print("✅ Rapport final généré dans /opt/airflow/data/rapport_final.csv")

# Définition du DAG
with DAG(
    dag_id="generate_rapport",
    description="Génère le rapport final des salariés éligibles",
    start_date=datetime(2023, 1, 1),
    schedule_interval=None,  # Pas de lancement automatique par défaut
    catchup=False,
    tags=["rapport", "final"]
) as dag:

    generate_rapport_task = PythonOperator(
        task_id="generate_rapport_task",
        python_callable=generate_rapport
    )
